import math
import random
from tqdm import tqdm

def solve_quadratic(a, b, c):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π –∏ —Å–∞–º–∏ –∫–æ—Ä–Ω–∏ (x1, x2)"""
    if abs(a) < 1e-10:  # a ‚âà 0
        if abs(b) < 1e-10:  # b ‚âà 0
            if abs(c) < 1e-10:  # c ‚âà 0
                return -1, None, None  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –º–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏–π
            else:
                return 0, None, None  # –ù–µ—Ç —Ä–µ—à–µ–Ω–∏–π
        else:
            x = -c / b
            return 1, x, x
    else:
        D = b**2 - 4*a*c
        if D > 0:
            x1 = (-b - math.sqrt(D)) / (2*a)
            x2 = (-b + math.sqrt(D)) / (2*a)
            return 2, min(x1, x2), max(x1, x2)
        elif abs(D) < 1e-10:  # D ‚âà 0
            x = -b / (2*a)
            return 1, x, x
        else:
            return 0, None, None

def format_root(x):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä–µ–Ω—å —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤, –µ—Å–ª–∏ –Ω–µ None"""
    if x is None:
        return "NAN"
    return f"{x:.6f}".rstrip('0').rstrip('.')

def generate_tests(min_per_type=10):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∏–Ω–∏–º—É–º min_per_type —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞:
    0 –∫–æ—Ä–Ω–µ–π, 1 –∫–æ—Ä–µ–Ω—å, 2 –∫–æ—Ä–Ω—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç tqdm –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    """
    tests = []
    count = {0: 0, 1: 0, 2: 0}
    total_generated = 0

    # –û–±—â–µ–µ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: —Å—É–º–º–∞ –º–∏–Ω–∏–º—É–º–æ–≤
    target_total = 2 * min_per_type

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –Ω–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    with tqdm(total=target_total, desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤", unit="—Ç–µ—Å—Ç", ncols=100, smoothing=0.1) as pbar:
        while count[0] < min_per_type or count[1] < 1 or count[2] < min_per_type:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            a = random.randint(-10_000_000, 10_000_000) * 2.4
            b = random.randint(-10_000_000, 10_000_000) * 2.4
            c = random.randint(-10_000_000, 10_000_000) * 2.4

            num_roots, x1, x2 = solve_quadratic(a, b, c)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ 0/1/2 –∏–ª–∏ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
            if num_roots not in (0, 1, 2):
                continue
            if count[num_roots] >= min_per_type:
                continue

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏
            count[num_roots] += 1
            total_generated += 1

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ—Ä–Ω–∏
            x1_str = format_root(x1)
            x2_str = format_root(x2)

            if num_roots == 0:
                result_str = f"{num_roots}, {x1_str}, {x2_str}"
            elif num_roots == 1:
                result_str = f"{num_roots}, {x1_str}, NAN"
            else:  # num_roots == 2
                result_str = f"{num_roots}, {x1_str}, {x2_str}"

            test_line = f"#{total_generated} ({a}, {b}, {c}) -> {result_str}"
            tests.append(test_line)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å: –Ω–∞ 1 –≤–ø–µ—Ä—ë–¥
            pbar.update(1)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            pbar.set_postfix({
                "0": count[0], "1": count[1], "2": count[2]
            })

    return tests, count, total_generated

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
min_per_type = 100_000_000 // 3  # ~33,333 —Ç–µ—Å—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
# min_per_type = 100_000_000 // 3  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –º–∏–ª–ª–∏–æ–Ω—ã (–Ω–æ –∑–∞–π–º—ë—Ç –û–ß–ï–ù–¨ –¥–æ–ª–≥–æ)
filename = "quadratic_tests.txt"

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ ===
print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤...\n")
test_cases, statistics, total = generate_tests(int(min_per_type))

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª ===
print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª...")
with open(filename, "w", encoding="utf-8") as f:
    for test in test_cases:
        f.write(test + "\n")

print(f"‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
print(f"üìä –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total}")
print("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∫–æ—Ä–Ω–µ–π:")
print(f"   0 –∫–æ—Ä–Ω–µ–π: {statistics[0]}")
print(f"   1 –∫–æ—Ä–µ–Ω—å:  {statistics[1]}")
print(f"   2 –∫–æ—Ä–Ω—è:   {statistics[2]}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π
assert statistics[0] >= min_per_type, "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤ —Å 0 –∫–æ—Ä–Ω—è–º–∏!"
assert statistics[2] >= min_per_type, "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤ —Å 2 –∫–æ—Ä–Ω—è–º–∏!"
print("‚úÖ –í—Å–µ —Ç–∏–ø—ã –∏–º–µ—é—Ç –Ω–µ –º–µ–Ω–µ–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤.")