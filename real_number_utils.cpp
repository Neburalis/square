const double MIN_TOLERANCE = 0.0001; // 1E-6

int clear_stdin_buffer(){
    while (getchar() != '\n')
        continue;
    return 1;
}

double safe_get_double(char var_name) {
    int scanf_status = -1;
    double var = NAN;
    for (;;) {
        printf("%c = ", var_name);
        scanf_status = scanf("%lg", &var);
        clear_stdin_buffer();
        if (scanf_status && !isinf(var))
            return var;
        printf("üò¢ –í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. "
               "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 12.34). "
               "–î–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–æ—á–∫–∞ (.).\n");
    }
}

int is_zero(double a) {
    if (fabs(a) < MIN_TOLERANCE)
        return 1;
    return 0;
}

// -------
//!
//! Func to compare real numbers.
//! if compare_double < 0 => a < b
//! if compare_double == 0 => a == b (Taking into account tolerance MIN_TOLERANCE)
//! if compare_double > 0 => a > b
//!
// ----
int compare_double(double a, double b) {
    assert(!isnan(a) && !isnan(b));

    if (fabs(a - b) < MIN_TOLERANCE)
        return 0;
    else if (a > b)
        return 1;
    // else if (b < a)
    return -1;
}

int minus_zero_check(double *variable) {
    if (is_zero(*variable)){
        *variable = 0;
        return 1;
    }
    return -1;
}
